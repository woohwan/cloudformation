--- 
# This Cloudformation template will creae following modules
# VPC, 2-public subnest, InternetGateway, 2 private subnets
# EKS ckuster with One node group

# StackName : eks-vpc

AWSTemplateFormatVersion: '2010-09-09'
Description: EKS cluster using a VPC with two public subnets

Mappings:
  VpcIpRange:
    Option1:
      VPC: 10.100.0.0/16
      PublicSubnet1: 10.100.0.0/18
      PublicSubnet2: 10.100.64.0/18
      PrivateSubnet1: 10.100.128.0/18
      PrivateSubnet2: 10.100.192.0/18

Resources:
#==========================================================================================#
# VPC
#==========================================================================================#
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ VpcIpRange, Option1, VPC ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [ VpcIpRange, Option1, PublicSubnet1 ]
      VpcId:   !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"
        - Key: kubernetes.io.role/elb
          Value: 1
        # not need more over k8s v1.19
        #- Key: !Sub "kubernetes.io/cluster/${AWS::StackName}" 
        #  Value: shared
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRange, Option1, PublicSubnet2 ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"
        - Key: kubernetes.io.role/elb
          Value: 1
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRange, Option1, PrivateSubnet1 ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1"
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRange, Option1, PrivateSubnet2 ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2"
        - Key: kubernetes.io/role/insternal-elb
          Value: 1

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  
  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # RouteTable for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnets"

  # Attach route table to Route
  InternetGatewayRoute:
    Type: AWS::EC2::Route
    # DependsOn is mandatory because route targets InternetGateway
    # See here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html#gatewayattachment
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  # create elastic ip to attache to NatGateway
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      Domain: "vpc"
  
  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - NatGateway1EIP
      - PublicSubnet1
    Properties:
      AllocationId: !GetAtt  NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1 # Required

  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - NatGateway2EIP
      - PublicSubnet2
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2 # Required

  # create route table to attache to router
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub  ${AWS::StackName} Private Routes (AZ1)

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub  ${AWS::StackName} Private Routes (AZ2)
  
  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # connect router to subnet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable # Required
      SubnetId: !Ref PublicSubnet1 # Required

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable # Required
      SubnetId: !Ref PublicSubnet2 # Required
    
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1 # Required
      SubnetId: !Ref PrivateSubnet1 # Required

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2 # Required
      SubnetId: !Ref PrivateSubnet2 # Required

Outputs:
  PrivateSubnetIds:
    Description: The subnet IDs to use for private eks node group
    Value:
      !Join [',', [ !Ref PrivateSubnet1, !Ref PrivateSubnet1 ]]
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PrivateSubnetIds'

  VpcId:
    Description: VPC for cusmtom managed eks
    Value: !Ref VPC
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-VpcId'