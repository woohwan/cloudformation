--- 

AWSTemplateFormatVersion: '2010-09-09'
Description: EKS cluster using a VPC with two public subnets

Parameters:
  EKSClusterName:
    Type: String
    Description: Name of k8s cluster
    Default: dev

  ControlPlaneSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id

  NumWorkerNodes:
    Type: Number
    Description: Number of worker nodes to create
    Default: 2
  
  NodesInstanceType:
    Type: String
    Description: EC2 instance type for the worker nodes
    Default: t3.medium

  NodeVolumeSize:
    Type: Number
    Default: 20
    Description: Node volume size  

  KeyPairName:
    Type: String
    Description: Name of an existing EC2 key pair (for SSH access to the worker node instance)
    Default: aws-ec2
  
  BootstrapArguments:
    Type: String
    Default: ""
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"

  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired capacity of Node Group ASG.

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 3
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.

  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Node Group ASG.

  NodeGroupName:
    Type: String
    Description: Unique identifier for the Node Group.

  Subnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The subnets where workers can be created.

  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: The VPC of the worker instances

  NodeImageId:
    Type: String
    Default: ""
    Description: (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.

  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.22/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances. Change this value to match the version of Kubernetes you are using.

Mappings:
  # IDs of the "EKS-optimised AMIs" for the worker nodes:
  # https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
  # IMPORTANT NOTE: Choose AWS EKS compatible ami IDs only
  EksAmiIds:
    ap-northeast-2:
      Standard: ami-06270d127b7771d04  # Amazon Linux 2 Kernel 5.10 AMI

Resources:
#==========================================================================================#
# Control Plane
#==========================================================================================#
  ControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - eks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      RoleName: !Sub '${AWS::StackName}-ControlPlaneRole'

#==========================================================================================#
# Control Plane Security Group
# add ingress and egress rule
#==========================================================================================#
  ControlPlaneIngressFromWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Incomming HTTPS traffic (TCP/443) from worker nodes (for API Server)
      GroupId: !Ref ControlPlaneSecurityGroupId
      SourceSecurityGroupId: !GetAtt NodeSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToWorkerNodesKublet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kublet traffic (TCP/10250) to worker nodes
      GroupId: !Ref ControlPlaneSecurityGroupId
      DestinationSecurityGroupId: !GetAtt NodeSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  ControlPlaneEgressToWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic (TCP/443) to worker nodes ( for pods running extension API servers)
      GroupId: !Ref ControlPlaneSecurityGroupId
      DestinationSecurityGroupId: !GetAtt NodeSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

#==========================================================================================#
# Worker nodes Security Group
# Note: default egress rule (allow all traffic to all destination)
#==========================================================================================#

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NodeSecurityGroup"
        - Key: !Sub "kuberntes.io/cluster/${EKSClusterName}"
          Value: "owned"

  NodesIngressFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !GetAtt NodeSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt NodeSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  NodesIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incomming kublet traffic (TCP/10250) from control plane
      GroupId: !GetAtt NodeSecurityGroup.GroupId
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroupId
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  NodesIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)
      GroupId: !GetAtt NodeSecurityGroup.GroupId
      SourceSecurityGroupId:  !Ref ControlPlaneSecurityGroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  NodesIngressFromControlPlane:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !GetAtt NodeSecurityGroup.GroupId
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroupId
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

#============================================================================#
# Worker nodes (Instance Role & Profile)
#============================================================================#
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodesInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref NodeInstanceRole

#============================================================================#
# Worker nodes Launch Template
#============================================================================#
  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp2
        IamInstanceProfile:
          Arn: !GetAtt NodesInstanceProfile.Arn
        ImageId: !FindInMap
          - EksAmiIds
          - !Ref AWS::Region
          - Standard
        InstanceType: !Ref NodesInstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !GetAtt  NodeSecurityGroup.GroupId
        # IMPORTANT NOTE: This code bootstrap some cfn settings on our ec2 machine, it require some parameters like
        # --stack <AWS::StackName>, --resource <NodeGroupName>, --region <AWS::region>
        # /usr/bin/ping -c 5 google.com ( To ensure that our node have internet connectivity via NATGateway )
        UserData:
          Fn::Base64: !Sub |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${EKSClusterName} ${BootstrapArguments}
              /opt/aws/bin/cfn-signal \
                              --exit-code $? \
                              --stack  ${AWS::StackName} \
                              --resource NodeGroup \
                              --region ${AWS::Region}
              /usr/bin/ping -c 5 google.com 
        # MetadataOptions:
        #   HttpPUtResponseHopLimit: 2
        #   HttpEndpoint: enabled
        #   HttpTokens: !If
        #     - IMDSv1Disabled
        #     - required
        #     - optional

#============================================================================#
# Node Group (Auto Scaling)
#============================================================================#
  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber

      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      MinSize: !Ref NodeAutoScalingGroupMinSize
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub ${EKSClusterName}-${NodeGroupName}-Node
        - Key: !Sub kubernetes.io/cluster/${EKSClusterName}
          PropagateAtLaunch: true
          Value: owned
      # A list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created.
      VPCZoneIdentifier: !Ref Subnets
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
        PauseTime: PT5M


Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup

  NodeAutoScalingGroup:
    Description: The autoscaling group
    Value: !Ref NodeGroup