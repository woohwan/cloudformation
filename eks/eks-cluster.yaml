--- 
AWSTemplateFormatVersion: '2010-09-09'
Description: EKS cluster using a VPC with two private subnets

# VPC Stack name: eks-vpc
# cluster Stack Name: eck-cluster

Parameters:

  VpcStackName:
    Type: String
    Default: eks-vpc

  ClusterName:
    Type: String
    Description: Name of k8s cluster
    Default: dev

Resources:

  ClusterSharedNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between all nodes in the cluster # Required
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${AWS::StackName}-ClusterSharedNodeSecurityGroup
      VpcId: !ImportValue 
        'Fn::Sub': '${VpcStackName}-VpcId'


#==========================================================================================#
# Control Plane
#==========================================================================================#
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub '${ClusterName}'
      Version: "1.22"
      RoleArn: !GetAtt ControlPlaneRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          'Fn::Split':
            - ','
            - Fn::ImportValue:
                !Sub  '${VpcStackName}-PrivateSubnetIds'

  PolicyELBPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAddresses
              - ec2:DescribeInternetGateways
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName:
        Fn::Sub: ${AWS::StackName}-PolicyELBPermissions
      Roles:
        - Ref: ControlPlaneRole

  ControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - eks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${AWS::StackName}-ControlPlaneRole

  VpcCni:
    Type: AWS::EKS::Addon
    DependsOn: ControlPlane
    Properties:
      AddonName: "vpc-cni" # Required
      AddonVersion: "v1.11.2-eksbuild.1"
      ClusterName: !Sub ${ClusterName} # Required
      ResolveConflicts: OVERWRITE
      Tags:
        - Key: eks-addon
          Value: True
        - Key: created_by
          Value: steve

#==========================================================================================#
#  Default ClusterSecurityGroup made. Inbound and Outbound: All
# Control Plane Security Group
# # Inbound: None, Outbound: All
#==========================================================================================#
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      VpcId: !ImportValue 
        'Fn::Sub': '${VpcStackName}-VpcId'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"


  IngressDefaultClusterToNodeSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: >-
        Allow managed and unmanaged nodes to communiate with each other (all ports)
      FromPort: 0
      GroupId: 
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: '-1' # Required
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ControlPlane
          - ClusterSecurityGroupId
      ToPort: 65535
  
  IngressInterNodeGroupSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId:
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: '-1' # Required
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
      ToPort: 65535

  IngressNodeToDefaultClusterSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId:
        Fn::GetAtt:
          - ControlPlane
          - ClusterSecurityGroupId
      IpProtocol: -1 # Required
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
      ToPort: 65535

Outputs:
  
  ARN:
    Description: EKS Control Plane Arn
    Value:
      Fn::GetAtt:
        - ControlPlane
        - Arn

  ClusterSecurityGroupId:
    Value:
      Fn::GetAtt:
        - ControlPlane
        - ClusterSecurityGroupId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ClusterSecurityGroupId

  ClusterStackName:
    Value:
      Ref: AWS::StackName
  Endpoint:
    Value:
      Fn::GetAtt:
        - ControlPlane
        - Endpoint
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-Endpoint

  ControlPlaneSecurityGroupId:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Ref ControlPlaneSecurityGroup
    Export:
      Name: 
        'Fn::Sub': '${AWS::StackName}-ControlPlaneSecurityGroupId'

  ControlPlaneRoleARN:
    Value:
      Fn::GetAtt:
        - ControlPlaneRole
        - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ControlPlaneRoleARN
  
  SharedNodeSecurityGroup:
    Value:
      Ref: ClusterSharedNodeSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SharedNodeSecurityGroup

  